# -*- snakemake -*-
import os
import pandas as pd
from snakemake.report import data_uri
from snakemakelib.stat import is_installed
from snakemakelib.config import update_snakemake_config
from snakemakelib.bio.ngs.qc.rseqc import collect_rseqc_results

include: '../settings.rules'
include: '../tools/conversion.rules'
include: '../../../comp/settings.rules'

ngs_cfg = config['bio.ngs.settings']

config_default = {
    'bio.ngs.qc.rseqc' : {
        'refgene' : ngs_cfg["annotation"]["transcript_annot_gtf"].replace(".gtf", ".bed12"),
        'home' : os.getenv("RSEQC_HOME", ""),
        'read_duplication' : {
            'cmd' : 'read_duplication.py',
            'options' : '',
        },
        'clipping_profile' : {
            'cmd' : 'clipping_profile.py',
            'options' : '',
        },
        'geneBody_coverage' : {
            'cmd' : 'geneBody_coverage.py',
            'options' : '',
        },
        'junction_annotation' : {
            'cmd' : 'junction_annotation.py',
            'options' : '',
        },
        'read_GC' : {
            'cmd' : 'read_GC.py',
            'options' : '',
        },
        'read_NVC' : {
            'cmd' : 'read_NVC.py',
            'options' : '',
        },
        'read_quality' : {
            'cmd' : 'read_quality.py',
            'options' : '',
        },
        'read_distribution' : {
            'cmd' : 'read_distribution.py',
            'options' : '',
        },

    },
}

config = update_snakemake_config(config, config_default)

rsq_cfg = config['bio.ngs.qc.rseqc']
python2 = config['comp.settings']['python2']['activate_cmd']

rule rseqc_read_duplication:
    """Run RSeQC read_duplication.py"""
    params: cmd = os.path.join(rsq_cfg['home'], rsq_cfg['read_duplication']['cmd']),
            options = rsq_cfg['read_duplication']['options'],
    input: "{prefix}.bam"
    output: pos = "{prefix}_rseqc/read_dup.pos.DupRate.xls",
            seq = "{prefix}_rseqc/read_dup.seq.DupRate.xls",
    shell: python2 + " && {params.cmd} {params.options} -i {input} -o $(dirname {output.seq})/read_dup"

rule rseqc_clipping_profile:
    """Run RSeQC clipping_profile.py"""
    params: cmd = os.path.join(rsq_cfg['home'], rsq_cfg['clipping_profile']['cmd']),
            options = rsq_cfg['clipping_profile']['options'],
    input: "{prefix}.bam"
    output: xls = "{prefix}_rseqc/clippingprofile.clipping_profile.xls",
    shell: python2 + " && {params.cmd} {params.options} -i {input} -o $(dirname {output.xls})/clippingprofile"

rule rseqc_geneBody_coverage:
    """Run RSeQC geneBody_coverage.py. 

    NB: Requries reference gene model in bed format (-r parameter).
    Moreover, requires indexed bam, which in turn requires sorted bam
    file. Currently it is not possible to check whether input file is
    sorted; consequently we explicitly request sorted input which then
    is removed once the command has finished. The dependent rule
    should have temporary output, or the RNA-seq alignment should be
    sorted.

    Memory intensive; needs more resources.
    """
    params: cmd = os.path.join(rsq_cfg['home'], rsq_cfg['geneBody_coverage']['cmd']),
            options = rsq_cfg['geneBody_coverage']['options'],
    input: bam = "{prefix}.sort.bam", bai = "{prefix}.sort.bam.bai", refgene = rsq_cfg['refgene']
    output: txt = "{prefix}_rseqc/geneBody_coverage.geneBodyCoverage.txt"
    shell: python2 + " && {params.cmd} {params.options} -i {input.bam} -o $(dirname {output.txt})/geneBody_coverage -r {input.refgene} && rm -f {input.bam} {input.bai}"

rule rseqc_junction_annotation:
    """Run RSeQC junction_annotation.py
    NB: Requries reference gene model in bed format
    """
    params: cmd = os.path.join(rsq_cfg['home'], rsq_cfg['junction_annotation']['cmd']),
            options = rsq_cfg['junction_annotation']['options'],
    input: bam = "{prefix}.bam", refgene = rsq_cfg['refgene']
    output: xls = "{prefix}_rseqc/junction_annotation_refseq.junction.xls",
            txt = "{prefix}_rseqc/junction_annotation_refseq.txt"
    shell: python2 + " && {params.cmd} {params.options} -i {input.bam} -o $(dirname {output.txt})/junction_annotation_refseq -r {input.refgene} 2> {output.txt}"

rule rseqc_read_GC:
    """Run RSeQC read_GC.py"""
    params: cmd = os.path.join(rsq_cfg['home'], rsq_cfg['read_GC']['cmd']),
            options = rsq_cfg['read_GC']['options'],
    input: "{prefix}.bam"
    output: xls = "{prefix}_rseqc/read_GC.GC.xls"
    shell: python2 + " && {params.cmd} {params.options} -i {input} -o $(dirname {output.xls})/read_GC"

rule rseqc_read_NVC:
    """Run RSeQC read_NVC.py"""
    params: cmd = os.path.join(rsq_cfg['home'], rsq_cfg['read_NVC']['cmd']),
            options = rsq_cfg['read_NVC']['options'],
    input: "{prefix}.bam"
    output: xls = "{prefix}_rseqc/read_NVC.NVC.xls"
    shell: python2 + " && {params.cmd} {params.options} -i {input} -o $(dirname {output.xls})/read_NVC"

rule rseqc_read_quality:
    """Run RSeQC read_quality.py"""
    params: cmd = os.path.join(rsq_cfg['home'], rsq_cfg['read_quality']['cmd']),
            options = rsq_cfg['read_quality']['options'],
    input: "{prefix}.bam"
    output: r = "{prefix}_rseqc/read_quality.qual.r"
    shell: python2 + " && {params.cmd} {params.options} -i {input} -o $(dirname {output.r})/read_quality"

rule rseqc_read_distribution:
    """Run RSeQC read_distribution.py
    
    NB: Requries reference gene model in bed format. Also memory
    intensive; needs more resources (approx 17GB).
    """
    params: cmd = os.path.join(rsq_cfg['home'], rsq_cfg['read_distribution']['cmd']),
            options = rsq_cfg['read_distribution']['options'],
    input: bam = "{prefix}.bam", refgene = rsq_cfg['refgene']
    output: "{prefix}_rseqc/read_distribution.txt"
    shell: python2 + " && {params.cmd} {params.options} -i {input.bam} -r {input.refgene} &> {output}"

rule rseqc_qc_8:
    """Run 8 RSeQC commands on a bam file"""
    input: read_dup = "{prefix}_rseqc/read_dup.pos.DupRate.xls", 
           clipping_profile = "{prefix}_rseqc/clippingprofile.clipping_profile.xls",
           geneBody_coverage = "{prefix}_rseqc/geneBody_coverage.geneBodyCoverage.txt",
           junction_annotation = "{prefix}_rseqc/junction_annotation_refseq.txt",
           read_GC = "{prefix}_rseqc/read_GC.GC.xls",
           read_NVC = "{prefix}_rseqc/read_NVC.NVC.xls",
           read_quality = "{prefix}_rseqc/read_quality.qual.r",
           read_distribution = "{prefix}_rseqc/read_distribution.txt"
    output: "{prefix}_rseqc/rseqc_qc_8.txt"
    shell: "echo `date` > {output}"

def _rseqc_find_rseqc_qc_8_result_files_fn(wildcards):
    ngs_cfg = config['bio.ngs.settings']
    sources = generic_target_generator(
        tgt_re = ngs_cfg['sampleorg'].sample_re,
        src_re=ngs_cfg['sampleorg'].run_id_re,
        target_suffix = os.path.join("." + wildcards.label, "rseqc_qc_8.txt"),
        **ngs_cfg)
    return sources


rule rseqc_qc_8_summary:
    """Summarize results from rseqc_qc_8 rule.
    Important: in order to catch {label} a label must be set on the
    rseqc output directory. Typically, this is something like
    "_rseqc".
    """
    input: _rseqc_find_rseqc_qc_8_result_files_fn
    output: read_distribution = os.path.join("{path}", "read_distribution_summary_{label}.csv"),
            gene_coverage = os.path.join("{path}", "gene_coverage_summary_{label}.csv")
    run:
        ngs_cfg = config['bio.ngs.settings']
        try:
            samples = [ngs_cfg['sampleorg'].sample_re.parse(f)['SM'] for f in input]
        except KeyError:
            raise Exception("failed to parse sample name 'SM' from input list")

        d = collect_rseqc_results(input, samples)
        if not d['rd'] is None:
            d['rd'].to_csv(output.read_distribution)
        if not d['gc'] is None:
            d['gc'].to_csv(output.gene_coverage)

