# -*- snakemake -*-
#
# Manual installation required. No setup exists so full path to
# installation directory must be supplied. Download from
# https://sites.google.com/site/danposdoc/download and extract archive
#
# Requirements:
# R version 2.9.1.
# Python 2.7, rpy2, numpy 1.5.0.
# Samtools 0.1.7 (only when input data is in sam or bam format)
#
# Memory ~ (genome_size/step_size) x ( replicate_count + max(2,
# comparison_count) ) x 8 bits.
#
import os
import json
import pysam
import numpy as np
from snakemakelib.config import update_snakemake_config
from snakemakelib.utils import utc_time
from snakemakelib.stat import is_installed

include: "../settings.rules"

config_default = {
    'bio.ngs.chromatin.danpos' : {
        'home' : os.getenv("DANPOS_HOME", ""),
        'cmd' : 'danpos.py',
        'bins' : [(0,100), (180,247), (315,473), (558,615)],
        'dpos' : {
            'options' : "-p 1 -a 1 -jd 20 --clonalcut 0",
            'threads' : 8, # seems to require substantial amounts of memory
        },
        'dpeak' : {
            'options' : "",
        },
        'dregion' : {
            'options' : "",
        },
        'dtriple' : {
            'options' : "",
        },
        'profile' : {
            'options' : "",
        },
        'wig' : {
            'options' : "",
        },
        'wig2wiq' : {
            'options' : "",
        },
        'stat' : {
            'options' : "",
        },
        'selector' : {
            'options' : "",
        },
        'valuesAtRanks' : {
            'options' : "",
        },
    },
}

config = update_snakemake_config(config, config_default)

dp_cfg = config['bio.ngs.chromatin.danpos']
python2 = config['comp.settings']['python2']['activate_cmd']

if dp_cfg['home']:
    dp_cfg['cmd'] = os.path.join(dp_cfg['home'], os.path.basename(dp_cfg['cmd']))

if not is_installed(os.path.join(dp_cfg.get('cmd', ""))):
    raise Exception("""
    bio.ngs.chromatin.danpos: {prog} not installed or not in PATH; 
        either set environment variable DANPOS_HOME or 
        bio.ngs.chromatin.danpos.home configuration setting
""".format(prog=dp_cfg.get('cmd')))

rule danpos_bin_reads_by_nucleosome:
    """Split reads into bins base on the parameter 'bins'"""
    input: bam="{prefix}.bam"
    output: bed=["{{prefix}}.{nucleosome}.bed".format(nucleosome=x) for x in range(len(dp_cfg['bins']))]
    log: json="{prefix}.danposbin.json"
    run:
        samfile = pysam.AlignmentFile(input.bam, "rb")
        outfh = [open(f, "w") for f in output.bed]
        bins = np.array([x for item in dp_cfg['bins'] for x in item])
        d = {'count': {k:0 for k in ['NA'] + list(range(len(dp_cfg['bins'])))},
             'rule': 'bio.ngs.chromatin.danpos.danpos_bin_reads_by_nucleosome', 
             'date': utc_time()}
        for s in samfile:
            inds = np.digitize([s.tlen], bins)
            if (inds[0] % 2 == 0):
                d['count']['NA'] += 1
                continue
            i = (int((inds[0] - 1) / 2))
            if (i>0):
                rl = int(s.tlen/i)
                for j in range(i):
                    outfh[i].write("{ref}\t{start}\t{end}\t{name}\t{score}\t{strand}\n".format(
                        ref=samfile.references[s.rname], 
                        start=s.pos + j * rl,
                        end=s.pos + (j + 1) * rl,
                        name="danpos", score=0, strand='-' if s.is_reverse else '+'
                    ))
            else:
                outfh[i].write("{ref}\t{start}\t{end}\t{name}\t{score}\t{strand}\n".format(
                    ref=samfile.references[s.rname], start=s.pos, end=s.pos + s.tlen,
                    name="danpos", score=0, strand='-' if s.is_reverse else '+'
                ))
            d['count'][i] += 1
        for fh in outfh:
            fh.close()
        with open(log.json, "w") as fh:
            fh.write(json.dumps(d))


# NB: ATAC-seq paper use option -d, which is obsolete in danpos v >=
# 2. From danpos v1.0.1 we have
#      -d , --distance       minimal distance between peaks, peaks closer than d
#                        will be merged as on peak (default: 100)
#
# which is equivalent (?) to
#  -jd , --distance      minimal center-to-center distance between positions,
#                        positions closer than d will be merged as one single
#                        position (default: 100)
# in danpos v2.0.0 

rule danpos_dpos:
    """Run danpos dpos.

    NB: the interface has changed substantially from version 1 to
    version two. In particular, it is difficult seeing the difference
    between using the background parameter and the a:b path notation,
    in which the latter indicates that b will be subtracted from a.
    Currently the path syntax is used.

    """
    params: cmd=dp_cfg['cmd'],
            options=dp_cfg['dpos']['options']
    input: bg="{prefix}.0.bed", nuc=["{{prefix}}.{nucleosome}.bed".format(nucleosome=x) for x in range(1, len(dp_cfg['bins']))]
    output: log=os.path.join("{prefix}", "danpos", "dpos.log")
    threads: dp_cfg['dpos']['threads']
    log: log=os.path.join("{prefix}", "danpos", "dpos.log")
    run:
        d = dict(params)
        d.update({'path': ",".join("{sample}:{bg}".format(sample=s, bg=input.bg) for s in input.nuc),
                  'outdir': os.path.join(wildcards.prefix, "danpos")})
        clist = [python2, " && python {cmd} dpos {path} {options} -o {outdir}".format(**d)]
        clist.append(" &> {log}".format(log=log))
        command = " ".join(clist)
        shell (command)
