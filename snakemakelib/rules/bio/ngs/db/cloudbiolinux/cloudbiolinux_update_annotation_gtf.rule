# -*- snakemake -*-
import os
from snakemakelib.bio.ngs.db import ref, annotation

rule cloudbiolinux_update_annotation_gtf:
    input: gtf = annotation(annotation='ref-transcripts.gtf',\
                            db_config=config['bio.ngs.settings']['db'], ignore_extra_ref=True),
           ref = [ref(x, config['bio.ngs.settings']['db']) for x in config['bio.ngs.settings']['db']['extra_ref']]
    output: gtf = protected(annotation(annotation="ref-transcripts-" + "-".join([os.path.splitext(os.path.basename(x))[0] for x in config['bio.ngs.settings']['db']['extra_ref']]) + ".gtf",\
                                       db_config=config['bio.ngs.settings']['db']))
    run:
        from Bio import SeqIO
        with open(output.gtf, "w") as out:
            with open (input.gtf, "r") as fh:
                for line in fh.readlines():
                    out.write(line)
            for f in input.ref:
                # Use genbank if present - it should be
                gb = re.sub("(.fa$|.fasta$)", ".gb", f)
                if os.path.exists(gb):
                    seqs = SeqIO.parse(open(gb), format = "gb")
                else:
                    continue
                for seq in seqs:
                    features = [sf.type for sf in seq.features]
                    d = {
                        'name' : seq.name,
                        'feature' : seq.features[0].type,
                        'start' : seq.features[0].location.start,
                        'end' : seq.features[0].location.end,
                        'score' : 0,
                        'strand' : '+',
                        'frame' : 0,
                        'gene_id' : seq.name,
                        'transcript_id' : seq.name,
                    }
                    out.write('{name}\tsnakemakelib\t{feature}\t{start}\t{end}\t{score}\t{strand}\t{frame}\tgene_id "{gene_id}"; transcript_id "{transcript_id}"\n'.format(**d))
