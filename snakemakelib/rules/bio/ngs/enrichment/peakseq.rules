# -*- snakemake -*-
#
# NB: PeakSeq requires mappability files that are generated by code
# found here:
# http://archive.gersteinlab.org/proj/PeakSeq/Mappability_Map/Code/
# This program is configured in section mappability. Make sure the
# three binaries chr2hash, mergeOligoCounts, oligoFindPLFFile are in
# PATH.
from os.path import splitext, join, dirname, abspath
from snakemakelib.bio.ngs.db import chromosomes
include: "../settings.rules"

config_default = {
    'bio.ngs.enrichment.peakseq' : {
        'index' : "",
        'ref' : config['bio.ngs.settings']['db']['ref'],
        'mappability' : {
            #'cmd' : 'compile.py',
            'merlen' : str(config['bio.ngs.settings']['read_length']),
            'chr2hash' : 'chr2hash',
            'oligoFindPLFFile' : 'oligoFindPLFFile',
            'mergeOligoCounts' : 'mergeOligoCounts',
        },
        'peakseq' :{
            'cmd' : 'PeakSeq',
        },
    },
}

update_config(config_default, config)
config = config_default


try:
    from snakemakelib.bio.ngs.db import index
    config['bio.ngs.enrichment.peakseq']['index'] = index(
        ref = config['bio.ngs.enrichment.peakseq']['ref'],
        index = config['bio.ngs.enrichment.peakseq']['index'],
        application = 'mappability',
        build = config['bio.ngs.settings']['db']['build'])
except:
    pass

mapdir = abspath(join(
    dirname(str(config['bio.ngs.enrichment.peakseq']['index'])),
    config['bio.ngs.enrichment.peakseq']['mappability']['merlen'])
)

# This is a hassle. See https://www.biostars.org/p/14092/
# The peakseq mappability command compile.py loops over all chromosomes, but
# the commands could be run independently. Parallelize here.
rule peakseq_mappability_chr2has:
    """Run chr2has"""
    params: cmd = config['bio.ngs.enrichment.peakseq']['mappability']['chr2hash']
    input: fa = "{prefix}.fa"
    output: HashOffsetTable=temp("{prefix}.fa.HashOffsetTable"), HashPosTable=temp("{prefix}.fa.HashPosTable")
    shell: "cd $(dirname {input.fa}) && {params.cmd} $(basename {input.fa})"

rule peakseq_mappability_find:
    """Run oligoFindPLFFile"""
    params: cmd = config['bio.ngs.enrichment.peakseq']['mappability']['oligoFindPLFFile'],
            merlen = config['bio.ngs.enrichment.peakseq']['mappability']['merlen']
    input: fa1 = join("{path}", "{chr1}.fa"), fa2 = join("{path}", "{chr2}.fa"), 
           pos1 = join("{path}", "{chr1}.fa.HashPosTable"), pos2 = join("{path}", "{chr2}.fa.HashPosTable"),
           off1 = join("{path}", "{chr1}.fa.HashOffsetTable"), off2 = join("{path}", "{chr2}.fa.HashOffsetTable")
    output: out=temp(join("{path}", "{chr1}__{chr2}.plf_out"))
    shell: "cd {wildcards.path} && {params.cmd} {wildcards.chr1}.fa {wildcards.chr2}.fa {params.merlen} 0 0 1 1 > $(basename {output.out})"

rule peakseq_mappability_merge:
    """Run mergeOligoCounts"""
    params: cmd = config['bio.ngs.enrichment.peakseq']['mappability']['mergeOligoCounts'],
            merlen = config['bio.ngs.enrichment.peakseq']['mappability']['merlen']
    input: [join("{path}", config['bio.ngs.enrichment.peakseq']['mappability']['merlen'], "{cref}__{{chr}}.plf_out".format(cref=x)) for x in chromosomes(config['bio.ngs.enrichment.peakseq']['ref'])]
    output: bout = join("{path}", config['bio.ngs.enrichment.peakseq']['mappability']['merlen'], "{chr}b.out")
    run:
        inputfiles = " ".join([basename(x) for x in input])
        path = dirname(output.bout)
        shell("cd {path} && {cmd} {inputfiles} > {bout}".format(path=path, bout=basename(output.bout), cmd=params.cmd, inputfiles=inputfiles))

rule peakseq_mappability:
    """Pseudo-rule: generate all mappability files by invoking the rules
    above
    """
    input: [join(mapdir, "{chr}b.out".format(chr=x)) for x in chromosomes(config['bio.ngs.enrichment.peakseq']['ref'])]
