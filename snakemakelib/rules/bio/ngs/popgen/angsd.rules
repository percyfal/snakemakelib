# -*- snakemake -*-
include: '../settings.rules'

DEFAULT_RULES = []

config_default = { 
    'bio.ngs.popgen.angsd' : {
        'rules' : DEFAULT_RULES,
        'home' : os.getenv("ANGSD_HOME", os.curdir),
        'chr_label' : "scaffold",
        'chr_extra' : "chrM",
        # I seem to have set a whole lot of specific options. Put them in subsection options for now
        'options' : {
            'anc' : config['bio.ngs.settings']['db']['ref'],
            'chr' : "",
            'chr_enum_from' : 1,
            'chr_enum_to' : 1,
            'chromosomes_width' : "",
            'gl' : 2,
            'maf' : 10,
            'majorminor' : 5,
            'maxiter' : 100,
            'nchr' : "",
            'nsites' : "",
            'populations' : "",
            'realSFS' : 1,
            'ref' : config['bio.ngs.settings']['db']['ref'],
            'doSaf' : 1,
            'step' : 50000,
            'threads' : config['bio.ngs.settings']['threads'],
            'window' : 50000,
            },
        'utils' : {
            'plotthetas' : os.path.join(sml_path(), 'scripts/plotThetas.R'),
        },
        # Private addition
        'ngstk' : {
            'cmd' : "ngstk",
            'plotngstk' : os.path.join(sml_path(), "scripts/plotNgstk.R"),
        }
    },
}

config = update_config(config_default, config)

# Second round
config_default = {
    'bio.ngs.popgen.angsd' : {
        'cmd' : os.path.join(config['bio.ngs.popgen.angsd']['home'], 'angsd'),
        'options' : {
            'chromosomes' : ["{chr_label}{chr}".format(
                chr_label=config['bio.ngs.popgen.angsd']['options']['chr_label'],
                chr=i) for i in range(config['bio.ngs.popgen.angsd']['options']['chr_enum_from'], config['bio.ngs.popgen.angsd']['options']['chr_enum_to'])],
            'chr_enum' : range(config['bio.ngs.popgen.angsd']['options']['chr_enum_from'], config['bio.ngs.popgen.angsd']['options']['chr_enum_to']),
        },
        'doCounts' : {
            'options' : "-doCounts 1 -dumpCounts 2 -anc {anc}".format(
                anc=config['bio.ngs.popgen.angsd']['options']['anc'])
        },
        'doSaf' : {
            'options' : "-doSaf {doSaf} -anc {anc} -GL {GL}".format(
                doSaf=config['bio.ngs.popgen.angsd']['options']['doSaf'],
                anc=config['bio.ngs.popgen.angsd']['options']['anc'],
                GL=config['bio.ngs.popgen.angsd']['options']['gl']),
        },
        'doThetas' : {
            'options' : "-realSFS 1 -GL {gl} -anc {anc} -doThetas 1 -nThreads {threads} -r {chr}".format(
                gl=config['bio.ngs.popgen.angsd']['options']['gl'],
                anc=config['bio.ngs.popgen.angsd']['options']['anc'],
                threads=config['bio.ngs.popgen.angsd']['options']['threads'],
                chr=config['bio.ngs.popgen.angsd']['options']['chr']),
        },
        'domafs' : {
            'options' :"-anc {anc} -doMajorMinor {majorminor} -doMaf {maf} -GL {gl} -nThreads {threads}".format(
                gl=config['bio.ngs.popgen.angsd']['options']['gl'],
                anc=config['bio.ngs.popgen.angsd']['options']['anc'],
                threads=config['bio.ngs.popgen.angsd']['options']['threads'],
                chr=config['bio.ngs.popgen.angsd']['options']['chr'],
                maf=config['bio.ngs.popgen.angsd']['options']['maf'],
                majorminor=config['bio.ngs.popgen.angsd']['options']['majorminor']),
        },
        'realSFS' : {
            'options' : "-realSFS 1 -GL {gl} -anc {anc} -nThreads {threads}".format(gl=config['bio.ngs.popgen.angsd']['options']['gl'], anc=config['bio.ngs.popgen.angsd']['options']['anc'], threads=config['bio.ngs.popgen.angsd']['options']['threads']),
        },
    },
}


config = update_config(config_default, config)

# rule rule_2:
# 	input: " {prefix}.sfs"
# 	output: "{prefix}.sfs.em2.ml"
# 	shell: "$(AWK) '{for (i=1; i<NF; i++) printf("%f ",exp($$i)); printf("%f", exp($$i))}' $@.exp > $@.tmp && mv $@.tmp $@"
# rule rule_8:
# 	input: " {prefix}.list"
# 	output: "{prefix}.mafs.gz"
# 	shell: "$(ANGSD) $(ANGSD_DOMAFS_OPTIONS) -bam $< -out $(@:.mafs.gz=).tmp && rename $(@:.mafs.gz=).tmp $(@:.mafs.gz=) $(@:.mafs.gz=).tmp*"
# rule rule_9:
# 	input: " {prefix}.list"
# 	output: "{prefix}.counts.gz"
# 	shell: "$(ANGSD) $(ANGSD_DOCOUNTS_OPTIONS) -bam $< -out $(@:.sfs=.counts.gz).tmp && rename $(@:.counts.gz=).tmp $(@:.counts.gz=) $(@:.counts.gz=).tmp*"
# rule rule_10:
# 	input: " {prefix}.list"
# 	output: "{prefix}.mpileup"
# 	shell: "$(ANGSD) $(ANGSD_DOCOUNTS_OPTIONS) -show 1 -bam $< -out $(@:.sfs=.mpileup).tmp && mv $(@:.mpileup=).tmp.mpileup $@"
# rule rule_13:
# 	input: " {prefix}.mafs.gz"
# 	output: "{prefix}.bed"
# 	shell: "$(ZCAT) $< | $(GREP) -v chromo | $(AWK) '{print $$1,$$2-1,$$2}' > $@.tmp && mv $@.tmp $@"
# rule rule_14:
# 	input: " {prefix}.bed"
# 	output: "{prefix}.pos.gz"
# 	shell: "$(AWK) '{print $$1, $$3}' $< | $(GZIP) -c > $@.tmp && mv $@.tmp $@"
# rule rule_15:
# 	input: " {prefix}.bed"
# 	output: "{prefix}.pos"
# 	shell: "$(AWK) '{print $$1, $$3}' $< > $@.tmp && mv $@.tmp $@"
# rule rule_18:
# 	input: ""
# 	output: "{prefix}_ngstk.txt"
# 	shell: "$(NGSTK) angsd $(POPA)_$(CHR) $(POPB)_$(CHR) -f $(FRAC) -c $(COV) > $@.tmp && mv $@.tmp $@"
# rule rule_19:
# 	input: " {prefix}.bgid_pestPG"
# 	output: "{prefix}.pdf"
# 	shell: "$(PLOTTHETAS) $< $@.tmp && mv $@.tmp $@"
# rule rule_20:
# 	input: " {prefix}_ngstk.txt"
# 	output: "{prefix}_ngstk.pdf"
# 	shell: "$(PLOTNGSTK) $< $@.tmp && mv $@.tmp $@"
