# -*- snakemake -*-
# tag: obsolete
#
if not 'picard_do_qc' in config['bio.ngs.qc.picard']['rules']:
    include: "picard/picard_do_qc.rule"

def _picard_find_picard_do_qc_result_files_fn(wildcards):
    config['bio.ngs.settings'] = config['bio.ngs.settings']
    sources = generic_target_generator(tgt_re = config['bio.ngs.settings']['sampleorg'].sample_re, src_re=ngs_cfg['sampleorg'].run_id_re, target_suffix = os.path.join("." + wildcards.label), **ngs_cfg)
    return sources

rule picard_qc_summary:
    """Summarize results from picard_do_qc"""
    input: _picard_find_picard_do_qc_result_files_fn
    output: metrics = os.path.join("{path}", "picard.{label}.metrics.csv"), 
            hist = os.path.join("{path}", "picard.{label}.hist.csv")
    run:
        try:
            samples = [ngs_cfg['sampleorg'].sample_re.parse(f)['SM'] for f in input]
        except KeyError:
            raise Exception("failed to parse sample name 'SM' from input list")
        from snakemakelib.bio.ngs.qc.picard import collect_picard_qc_results
        (df_met, df_hist) = collect_picard_qc_results(input, samples)
        if not df_met is None:
            df_met.to_csv(output.metrics)
        if not df_hist is None:
            df_hist.to_csv(output.hist, index=False)
        else:
            with open(output.hist, "w") as fh:
                fh.write("{ext} metrics has no histogram data".format(ext=os.path.splitext(input[0])[1]))
