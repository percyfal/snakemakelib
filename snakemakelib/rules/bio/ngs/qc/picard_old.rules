# -*- snakemake -*-
# picard old rules predating version ??? (1.1, 1.0) where individual jar files still were used 
import os
from snakemakelib.config import update_snakemake_config, sml_path

include: '../settings.rules'
include: '../../../comp/settings.rules'

# Jar program names
BUILD_BAM_INDEX = "BuildBamIndex.jar"
SORT_SAM = "SortSam.jar"
MERGE_SAM_FILES = "MergeSamFiles.jar"
REORDER_SAM = "ReorderSam.jar"
MARK_DUPLICATES = "MarkDuplicates.jar"
CREATE_SEQUENCE_DICTIONARY = "CreateSequenceDictionary.jar"
COLLECT_INSERT_SIZE_METRICS = "CollectInsertSizeMetrics.jar"
COLLECT_ALIGNMENT_SUMMARY_METRICS = "CollectAlignmentSummaryMetrics.jar"
CALCULATE_HS_METRICS = "CalculateHsMetrics.jar"
ADD_OR_REPLACE_READ_GROUPS = "AddOrReplaceReadGroups.jar"

config_default = { 
    'bio.ngs.qc.picard' : {
        # 'insertmetrics_targets' : "$(subst .bam,.insert_metrics,$(wildcard $(inputdir)/*/*recal.bam))",
        #'alignmetrics_targets' : "$(subst .bam,.align_metrics,$(wildcard $(inputdir)/*/*recal.bam))",
        #'dupmetrics_targets' : "$(subst .bam,.dup_metrics,$(wildcard $(inputdir)/*/*recal.bam))",
        #'hsmetrics_targets' : "$(subst .bam,.hs_metrics,$(wildcard $(inputdir)/*/*recal.bam))",
        'add_or_replace_read_groups_options' : "sort_order=coordinate create_index=true",
        'alignmetrics_targets' : [],
        'bait_regions' : sml_config['bio.ngs.settings']['sequence_capture']['bait_regions'],
        'common_options' : "VALIDATION_STRINGENCY=SILENT",
        'dupmetrics_targets' : [],
        'home' : ".",
        'hsmetrics_targets' : [],
        'insertmetrics_targets' : [],
        'java_mem' : sml_config['bio.ngs.settings']['java']['java_mem'],
        'java_tmpdir' : sml_config['bio.ngs.settings']['java']['java_tmpdir'],
        'merge_sam_prefix' : "merge",
        'merge_sam_options' : "CREATE_INDEX=true",
        'merge_sam_targets' : [],
        'plotmetrics' : os.path.join(sml_path(), "scripts", "plotMetrics.R"),
        'ref' : sml_config['bio.ngs.settings']['db']['ref'],
        'sort_sam_options' : "SORT_ORDER=coordinate",
        'target_regions' : sml_config['bio.ngs.settings']['sequence_capture']['target_regions'],
    },
}

config = update_snakemake_config(config, config_default)

config_default['bio.ngs.qc.picard']['options'] = sml_config['bio.ngs.qc.picard']['common_options'] 

config_default['bio.ngs.qc.picard']['cmd'] = "java -Xmx" + sml_config['bio.ngs.qc.picard']['java_mem'] + " -Djava.io.tmpdir=" + sml_config['bio.ngs.qc.picard']['java_tmpdir'] + " -jar "

config = update_snakemake_config(config, config_default)

# Use picard config to increase readibility

picard_config = config['bio.ngs.qc.picard']

rule picard_build_bam_index:
    """Picard: build bam index from bam file"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], BUILD_BAM_INDEX),
            options = picard_config['options']
    input: "{prefix}.bam"
    output: "{prefix}.bai"
    shell: "{params.cmd} I={input} O={output} {params.options}"


rule picard_sort_bam:
    """Picard: sort bam file"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], SORT_SAM),
            options = picard_config['options'],
            sortsam_options = picard_config['sort_sam_options']
    input: "{prefix}.bam"
    output: "{prefix}.sort.bam"
    shell: "{params.cmd} I={input} O={output} {params.options} {params.sortsam_options}"

rule picard_reorder_bam:
    """Picard: reorder bam file"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], REORDER_SAM),
            options = picard_config['options']
    input: "{prefix}.bam", picard_config['ref']
    output: "{prefix}.resorted.bam"
    shell: "{params.cmd} I={input[0]} R={input[1]} O={output} {params.options}"

rule picard_mark_duplicates:
    """Picard: mark duplicates"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], MARK_DUPLICATES),
            options = picard_config['options']
    input: "{prefix}.bam"
    output: "{prefix}.dup.bam", "{prefix}.dup_metrics"
    shell: "{params.cmd} I={input} O={output[0]} {params.options} M={output[1]}"

# rule picard_create_sequence_dictionary:
#     params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], CREATE_SEQUENCE_DICTIONARY),
#             options = picard_config['options']
#     input: picard_config['ref']
#     output: "{prefix}.interval_list"
#     shell: "{params.cmd} R={input} O={output}"

rule picard_create_interval_list_awk:
    """Picard: create interval list using awk"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], CREATE_SEQUENCE_DICTIONARY),
            options = picard_config['options']
    input: "{prefix}.bed", picard_config['ref'].replace(".fa", ".interval_list")
    output: "{prefix}.interval_list"
    shell: config['comp.settings']['awk'] + " '{{printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\", $$1,$$2,$$3,\"+\",$$4)}}' $< >> {output}"

rule picard_collect_insert_size_metrics:
    """Picard: collect insertion size metrics"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], COLLECT_INSERT_SIZE_METRICS),
            options = picard_config['options']
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.insert_metrics"
    shell: "{params.cmd} {params.options} H={wildcards.prefix}.hist I={input[0]} O={output} R={input[1]}"

rule picard_mark_duplicates_metrics:
    """Picard: mark duplicates metrics. See also picard_mark_duplicates"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], MARK_DUPLICATES),
            options = picard_config['options']
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.dup_metrics", "{prefix}.dup.bam"
    shell: "{params.cmd} {params.options} I={input[0]} M={output[0]} O={output[1]}"

rule picard_collect_alignment_summary_metrics:
    """Picard: collect alignment summary metrics"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], COLLECT_ALIGNMENT_SUMMARY_METRICS),
            options = picard_config['options']
    input: "{prefix}.bam", "{prefix}.bai", picard_config['ref']
    output: "{prefix}.align_metrics"
    shell: "{params.cmd} {params.options} I={input} O={output[0]} R={input[2]}"

rule picard_calculate_hs_metrics:
    """Picard: calculate hybrid selection metrics"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], CALCULATE_HS_METRICS),
            options = picard_config['options'],
            target_regions = picard_config['target_regions'],
            bait_regions = picard_config['bait_regions']
    input: "{prefix}.bam", "{prefix}.bai", picard_config['ref']
    output: "{prefix}.hs_metrics"
    shell: "{params.cmd} {params.options} TI={params.target_regions} BI={params.bait_regions} I={input[0]} O={output} R={input[2]}"

rule picard_plot_metrics:
    """Picard: plot metrics using custom R script """
    params: cmd = picard_config['plotmetrics']
    input: "{prefix}_metrics.txt"
    output: "{prefix}_metrics.pdf"
    shell: "{params.cmd} {input} {output} {wildcards.prefix}"

rule picard_add_or_replace_read_groups:
    """Picard: add or replace read groups. Currently tailored for Illumina read groups."""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], ADD_OR_REPLACE_READ_GROUPS),
            options = picard_config['options'],
            custom_options = picard_config['add_or_replace_read_groups_options'],
            lib = "lib",
            rgpl = "Illumina",
            # rgpu = input.split(".")[0],
            # rgid = input.split(".")[0],
            # rgsm = input.split(".")[0]
            rgpu = "rgpu",
            rgid = "rgid",
            rgsm = "rgsm"
    input: "{prefix}.bam"
    output: "{prefix}.rg.bam"
    shell: "{params.cmd} INPUT={input} OUTPUT={output} {params.custom_options} RGID={params.rgid} RGLIB={params.lib} RGSM={params.rgsm} RGPL={params.rgpl} RGPU={params.rgpu}"

rule picard_merge_sam:
    """Picard: merge sam files"""
    params: cmd = picard_config['cmd'] + os.path.join(picard_config['home'], MERGE_SAM_FILES),
            options = " ".join([picard_config['options'],
            picard_config['merge_sam_options'],
            picard_config['common_options']])
    input: ["INPUT={}".format(x) for x in picard_config['merge_sam_targets']]
    output: picard_config['merge_sam_prefix'] + ".merge.bam"
    shell: "{params.cmd} {input} O={output} {params.options}"
