# -*- snakemake -*-
import os
from snakemakelib.config import update_snakemake_config

include: '../settings.rules'

TRIMMOMATIC_JAR_PROGRAM = "trimmomatic.jar"

config_default = { 
    'bio.ngs.qc.sequenceprocessing' : {
        'cutadapt' : {
            'cmd' : "cutadapt",
            'threeprime': "AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC",
            'fiveprime' : "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT",
            'options' : "",
        },
        'trimmomatic' : {
            'home' : os.getenv("TRIMMOMATIC_HOME", os.curdir),
            'options' : "-phred33",
            'java_mem' : config['bio.ngs.settings']['java']['java_mem'],
            'java_tmpdir' : config['bio.ngs.settings']['java']['java_tmpdir'],
            'processing_options' : "LEADING:15 TRAILING:15 MINLEN:36",
        },
        'resyncmates' : {
            'home' : ".",
            'cmd' : "resyncmates.pl",
            'options' : "",
        },
        'fastqc' : {
            'cmd' : "fastqc",
            'options' : "-q",
        },
        'trim_galore' : {
            'cmd' : "trim_galore",
            'options' : "--paired --trim1 --phred33 --fastqc",
            'read1_suffix' : "_val_1.fq.gz",
            'read2_suffix' : "_val_2.fq.gz",
        },
    },
}

config = update_snakemake_config(config, config_default)

config_default['bio.ngs.qc.sequenceprocessing']['trimmomatic']['jar'] = os.path.join(config['bio.ngs.qc.sequenceprocessing']['trimmomatic']['home'], TRIMMOMATIC_JAR_PROGRAM)

config = update_snakemake_config(config, config_default)

config_default['bio.ngs.qc.sequenceprocessing']['trimmomatic']['cmd']  = "java -Xmx" + config['bio.ngs.qc.sequenceprocessing']['trimmomatic']['java_mem'] + " -Djava.io.tmpdir=" + config['bio.ngs.qc.sequenceprocessing']['trimmomatic']['java_tmpdir'] +  " -jar " + config['bio.ngs.qc.sequenceprocessing']['trimmomatic']['jar']

config = update_snakemake_config(config, config_default)

sp_cfg = config['bio.ngs.qc.sequenceprocessing']
ngs_cfg = config['bio.ngs.settings']

# rule rule_3:
# 	input: " {prefix}$('read1_label').trimmed.fastq.gz {prefix}$('read2_label').trimmed.fastq.gz"
# 	output: "{prefix}$('read1_label').trimmed.sync.fastq.gz"
# 	shell: "$(RESYNCMATES) $(RESYNCMATES_options) -i $< -j $*$('read2_label').trimmed.fastq.gz -o $@.tmp.gz -p $*$('read2_label').trimmed.sync.fastq.gz && mv $@.tmp.gz $@"

# rule rule_4:
# 	input: " {prefix}$('read1_label').trimmed.sync.fastq.gz"
# 	output: "{prefix}$('read2_label').trimmed.sync.fastq.gz"
# 	shell: "@echo $@ should be done in rule 1"

# rule rule_5:
# 	input: " {prefix}$('read1_label').fq.gz {prefix}$('read2_label').fq.gz"
# 	output: "{prefix}.trimmomatic.PE"
# 	shell: "$(TRIMMOMATIC_COMMAND) PE $(TRIMMOMATIC_options) $^ $*$('read1_label').P.qtrim.fq.tmp.gz $*$('read1_label').U.qtrim.fq.tmp.gz $*$('read2_label').P.qtrim.fq.tmp.gz $*$('read2_label').U.qtrim.fq.tmp.gz $(TRIMMOMATIC_PROCESSING_options) &> $@.tmp && mv $@.tmp $@ && mv $*$('read1_label').P.qtrim.fq.tmp.gz $*$('read1_label').P.qtrim.fq.gz && mv $*$('read1_label').U.qtrim.fq.tmp.gz $*$('read1_label').U.qtrim.fq.gz && mv $*$('read2_label').P.qtrim.fq.tmp.gz $*$('read2_label').P.qtrim.fq.gz && mv $*$('read2_label').U.qtrim.fq.tmp.gz $*$('read2_label').U.qtrim.fq.gz"

# rule rule_6:
# 	input: " {prefix}.trimmomatic.PE"
# 	output: "{prefix}$('read1_label').P.qtrim.fq.gz"
# 	shell: "echo Running rule $*.trimmomatic.PE to generate $@"

# rule rule_7:
# 	input: " {prefix}.trimmomatic.PE"
# 	output: "{prefix}$('read1_label').U.qtrim.fq.gz"
# 	shell: "echo Running rule $*.trimmomatic.PE to generate $@"

# rule rule_8:
# 	input: " {prefix}.trimmomatic.PE"
# 	output: "{prefix}$('read2_label').P.qtrim.fq.gz"
# 	shell: "echo Running rule $*.trimmomatic.PE to generate $@"

# rule rule_9:
# 	input: " {prefix}.trimmomatic.PE"
# 	output: "{prefix}$('read2_label').U.qtrim.fq.gz"
# 	shell: "echo Running rule $*.trimmomatic.PE to generate $@"

##################################################
# FastQC
##################################################
rule fastqc_main:
    """Sequenceprocessing: run fastqc on a fastq file"""
    params: cmd = sp_cfg['fastqc']['cmd'],
            options = sp_cfg['fastqc']['options'],
    input: "{prefix}" + ngs_cfg['fastq_suffix']
    output: "{prefix}_fastqc/fastqc_report.html"
    shell: "{params.cmd} {params.options} {input}"

##################################################
# trim_galore
##################################################
rule trim_galore_main:
    """Sequenceprocessing: run trim_galore on a fastq file"""
    params: cmd = sp_cfg['trim_galore']['cmd'],
            options = " ".join([sp_cfg['trim_galore']['options'],"--gzip"])
    input: "{prefix}" + ngs_cfg['read1_label'] + ngs_cfg['fastq_suffix'],\
           "{prefix}" + ngs_cfg['read2_label'] + ngs_cfg['fastq_suffix']
    output: "{prefix}" + ngs_cfg['read1_label'] + sp_cfg['trim_galore']['read1_suffix'],\
            "{prefix}" + ngs_cfg['read2_label'] + sp_cfg['trim_galore']['read2_suffix']
    shell: "{params.cmd} {params.options} {input} -o $(dirname {wildcards.prefix})"
