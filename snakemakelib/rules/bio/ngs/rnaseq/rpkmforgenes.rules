# -*- snakemake -*-
import os
import shutil
from snakemakelib.stat import is_installed
from snakemakelib.config import update_snakemake_config
from snakemakelib.bio.ngs.db import annotation

include: '../settings.rules'
include: '../tools/bedtools.rules'

ngs_cfg = config['bio.ngs.settings']

config_default = {
    'bio.ngs.rnaseq.rpkmforgenes' : {
        'home' : "",
        'cmd' : 'rpkmforgenes.py',
        'annotation' : ngs_cfg['annotation']['transcript_annot_gtf'],
        'options' : "-readcount -fulltranscript -mRNAnorm -rmnameoverlap -bothendsceil",
        'unique' : "",
        'annot_format' : 'refFlat',
    },
}


config = update_snakemake_config(config, config_default)

rfg_cfg = config['bio.ngs.rnaseq.rpkmforgenes']
python2 = config['comp.settings']['python2']['activate_cmd']

if rfg_cfg['home']:
    rfg_cfg['cmd'] = os.path.join(rfg_cfg['home'], os.path.basename(rfg_cfg['cmd']))
else:
    try:
        rfg_cfg['cmd'] = shutil.which(rfg_cfg['cmd'])
    except:
        pass

if not is_installed(os.path.join(rfg_cfg.get('cmd', ""))):
    raise Exception("\nbio.ngs.rnaseq.rpkmforgenes: {prog} not installed or not in PATH\n".format(prog=rfg_cfg.get('cmd')))

# Update annotation
config['bio.ngs.rnaseq.rpkmforgenes']['annotation'] = \
    annotation(annotation=config['bio.ngs.rnaseq.rpkmforgenes']['annotation'],
               db_cfg=config['bio.ngs.settings']['db'],
               fmt=config['bio.ngs.rnaseq.rpkmforgenes']['annot_format'])
if config['bio.ngs.rnaseq.rpkmforgenes']['annot_format'] != "gtf":
    include: '../db/ucsc.rules'

# rpkmforgenes.py -readcount -fulltranscript -mRNAnorm -rmnameoverlap -bothendsceil -n 15_115 -i /home/asab/perlmann/nobackup/mapping/star_mm10egfp_T.Perlmann_14_01/15_115/15_115_unique.bam -p 1 -a /proj/b2014109/private/genomes/annotation/refGene_140508_norandom_egfp.txt -u /proj/b2014109/private/genomes/MULTo1.0/mm10_20-255/ -o test_refseq_rpkms.txt    
rule rpkmforgenes_from_bam:
    """Run rpkmforgenes from bam input"""
    params: cmd = rfg_cfg['cmd'],
            options = " ".join([
            rfg_cfg['options'],
            ])
    input: unique = [rfg_cfg['unique']] if rfg_cfg['unique'] else [], annotation = [rfg_cfg['annotation']] if rfg_cfg['annotation'] else [], bam = "{prefix}.bam"
    output: rpkmforgenes = "{prefix}.rpkmforgenes"
    log: "{prefix}.rpkmforgenes.log"
    run:
        d = dict(params)
        d.update(dict(input))
        d.update(dict(output))
        clist = [python2, " && python {cmd} {options} -bamu -i {bam} -o {rpkmforgenes}".format(**d)]
        if input.unique:
            clist.append(" -u {unique}".format(**d))
        if input.annotation:
            clist.append(" -a {annotation}".format(**d))
        clist.append(" &> {log}".format(log=log))
        command = " ".join(clist)
        shell(command)

rule rpkmforgenes_from_bed:
    """Run rpkmforgenes from bed input"""
    params: cmd = rfg_cfg['cmd'],
            options = " ".join([
            rfg_cfg['options'],
            "-a", rfg_cfg['annotation'],
            ])
    input: unique = rfg_cfg['unique'], bed = "{prefix}.bed" 
    output: rpkmforgenes = "{prefix}.rpkmforgenes"
    run:
        print (input)

ruleorder: rpkmforgenes_from_bam > rpkmforgenes_from_bed
