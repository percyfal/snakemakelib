# -*- snakemake -*-
import pandas as pd
from snakemakelib.bio.ngs.targets import generic_target_generator

def _rpkmforgenes_find_result_files_fn(wildcards):
    sources = generic_target_generator(
        tgt_re = config['bio.ngs.settings']['sampleorg'].sample_re,
        src_re=config['bio.ngs.settings']['sampleorg'].run_id_re,
        target_suffix = "." + wildcards.label + '.rpkmforgenes',
        **config['bio.ngs.settings'])
    return sources

rule rpkmforgenes_summarize_expression_data:
    """rpkmforgenes: summarize expression results"""
    input: _rpkmforgenes_find_result_files_fn
    output: csv = os.path.join("{path}", "rpkmforgenes.{label}.csv")
    run:
        first = True
        for f in input:
            try:
                sample = config['bio.ngs.settings']['sampleorg'].sample_re.parse(f)['SM']
            except KeyError:
                raise Exception("failed to parse sample name 'SM' from input file name {}".format(f))
            df_tmp = pd.read_table(f, header=None, comment="#")
            df_tmp.columns = ["gene_id", "transcript", "FPKM", "TPM"]
            df_tmp["sample"] = sample
            if first:
                df = df_tmp
                first = False
            else:
                df = pd.concat([df, df_tmp])
        df_out = df.set_index(["gene_id"])
        df_out.to_csv(output.csv)
    
