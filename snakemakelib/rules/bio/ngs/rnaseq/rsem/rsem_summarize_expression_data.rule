# -*- snakemake -*-
import pandas as pd
from snakemakelib.bio.ngs.targets import generic_target_generator

def _rsem_find_result_files_fn(wildcards):
    config['bio.ngs.settings'] = config['bio.ngs.settings']
    sources = generic_target_generator(
        tgt_re = config['bio.ngs.settings']['sampleorg'].sample_re,
        src_re=config['bio.ngs.settings']['sampleorg'].run_id_re,
        target_suffix = ".".join(["", wildcards.label, wildcards.type]) + '.results',
        **config['bio.ngs.settings'])
    return sources

rule rsem_summarize_expression_data:
    """Summarize expression results"""
    input: _rsem_find_result_files_fn
    output: csv = os.path.join("{path}", "rsem.{label}.{type}.csv")
    run:
        first = True
        for f in input:
            try:
                sample = config['bio.ngs.settings']['sampleorg'].sample_re.parse(f)['SM']
            except KeyError:
                raise Exception("failed to parse sample name 'SM' from input file name")
            tmp = pd.read_table(f)
            df_tmp = pd.DataFrame({k:tmp[k] for k in ["expected_count", "TPM", "FPKM"]})
            df_tmp.index = tmp["gene_id"]
            if first:
                df = df_tmp
                first = False
            else:
                df = pd.concat([df, df_tmp])
        df.to_csv(output.csv)
    
