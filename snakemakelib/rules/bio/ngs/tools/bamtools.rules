# -*- snakemake -*-
import os
import json
from snakemakelib.stat import is_installed
from snakemakelib.config import update_config

include: '../settings.rules'

config_default = { 
    'bio.ngs.tools.bamtools' : {
        'ref' : config['bio.ngs.settings']['db']['ref'],
        'cmd' : "bamtools",
        'home' : "",
        'threads' : config['bio.ngs.settings']['threads'],
        'options' : "",
        'filter' : {
            'options' : {'mapQuality' : ">=255"},
            'regions' : config['bio.ngs.settings']['regions'],
        },
    },
}

update_config(config_default, config)
config = config_default

# see http://stackoverflow.com/questions/23244418/set-ld-library-path-before-importing-in-python
libpath = ""
if config['bio.ngs.tools.bamtools']['home']:
    os.environ["PATH"] += os.pathsep + config['bio.ngs.tools.bamtools']['home']
    bamtools_lib = os.path.join(os.path.dirname(os.path.dirname(config['bio.ngs.tools.bamtools']['home'])), "lib")
    libpath = "LD_LIBRARY_PATH=" + bamtools_lib
    if not os.path.exists(bamtools_lib):
        raise Exception("\nbio.ngs.tools.bamtools: couldn't find bamtools library path {libpath}".format(libpath=libpath))
if not is_installed(os.path.join(config['bio.ngs.tools.bamtools'].get('cmd', ""))):
    raise Exception("\nbio.ngs.tools.bamtools: {prog} not installed or not in PATH\n".format(prog=config['bio.ngs.tools.bamtools'].get('cmd')))

rule bamtools_filter_unique:
    """Run bamtools filter on a bam file"""
    params: cmd = config['bio.ngs.tools.bamtools']['cmd'],
            options = " ".join("-{{}} \"{{}}\"".format(k,v) for k,v in config['bio.ngs.tools.bamtools']['filter']['options'].items())
    input: "{prefix}.bam"
    output: "{prefix}_unique.bam"
    log: "{prefix}_unique.log"
    shell: libpath + " {params.cmd} filter -in {input} -out {output} {params.options} > {log}"

rule bamtools_filter_script:
    """Run bamtools filter on a bam file using a script input file"""
    params: cmd = config['bio.ngs.tools.bamtools']['cmd'],
            options = " ".join("-{} \"{}\"".format(k,v) for k,v in config['bio.ngs.tools.bamtools']['filter']['options'].items())
    input: script = "{prefix}.script" if config['bio.ngs.tools.bamtools']['filter']['regions'] else [], bam = "{prefix}.bam"
    output: bam = "{prefix}.filter.bam"
    log: "{prefix}.filter.log"
    shell:
        "{params.cmd} filter -in {input.bam} -out {output.bam} {params.options} " +
        "-script {input.script} > {log} " if config['bio.ngs.tools.bamtools']['filter']['regions'] else "> {log}"


rule bamtools_create_filter_script:
    """Create bamtools filter script"""
    params: script = "\n".join('{{\n"reference":"{r}",{s}\n}},'.format(r=r, s=json.dumps(config['bio.ngs.tools.bamtools']['filter']['options'], indent=1).lstrip("{").rstrip("}")) for r in config['bio.ngs.tools.bamtools']['filter']['regions']).rstrip(",")
    output: script = temporary("{prefix}.script")
    shell:
        """echo '{{"filters":[\n{params.script}\n    ]\n}}\n' > {output.script}"""
