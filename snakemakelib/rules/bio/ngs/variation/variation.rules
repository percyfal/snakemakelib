# -*- snakemake -*-
import os
from snakemakelib.config import update_snakemake_config

include: '../settings.rules'

bio_cfg = config['bio.ngs.settings']

config_default = {
    'bio.ngs.variation.variation' : {
        'annovar' : {
            'buildver' : bio_cfg['db']['ref'],
            'convert_options' : "--includeinfo",
            'convert_vcf_format' : "vcf4",
            'dblist' : ["dgv", "genomicSuperDups", "gwascatalog", "tfbs", "wgEncodeRegTfbsClustered", "wgEncodeRegDnaseClustered", "phastConsElements46way"],
            'dblist_webfrom_annovar' : ["1000g2012apr", "cosmic64", "esp6500si_all", "esp6500si_ea", "ljb_all", "snp137", "refGene", "avsift"],
            'path' : os.getenv("ANNOVAR_HOME", os.curdir),
            'options' : "",
            'table_options' : "--otherinfo",
        },
        'snpeff' : {
            'path' : os.getenv("SNPEFF_HOME", os.curdir),
            'java_mem' : bio_cfg['java']['java_mem'],
            'java_tmpdir' : bio_cfg['java']['java_tmpdir'],
            'dblist' : "hg19",
            'genome_version' : bio_cfg['db']['build'],
        },
        'vcftools' : {
            'path' : os.getenv("VCFTOOLS_HOME", os.curdir),
            'options' : {
                'main' : "",
                'stats' : "",
            },
        },
        'htslib' : {
            'path' : os.getenv("HTSLIB_HOME", os.curdir),
        },
        'vcf' : {
            'path' : os.getenv("VCF_HOME", os.curdir),
        },
    },
}

config = update_snakemake_config(config, config_default)

var_cfg = config['bio.ngs.variation.variation']

config_default = {
    'bio.ngs.variation.variation' : {
        'annovar' : {
            'db' : os.path.join(var_cfg['annovar']['path'], "/humandb"),
        },
        'snpeff' : {
            'config' : os.path.join(var_cfg['snpeff']['path'], "snpEff.config"),
            'jar' : os.path.join(var_cfg['snpeff']['path'], "snpEff.jar"),
        },
        'vcftools' : {
            'cmd' : os.path.join(var_cfg['vcftools']['path'], 'vcftools'),
        },
    },
}

config = update_snakemake_config(config, config_default)

var_cfg = config['bio.ngs.variation.variation']

config_default = {
    'bio.ngs.variation.variation' : {
        'snpeff' : {
            'options' : "-c {config}".format(config=var_cfg['snpeff']['config']),
            'cmd' : "java -Xmx{java_mem} -Djava.io.tmpdir={java_tmpdir} -jar {jar}".format(java_mem=var_cfg['snpeff']['java_mem'],
                                                                                           java_tmpdir=var_cfg['snpeff']['java_tmpdir'],
                                                                                           jar=var_cfg['snpeff']['jar']),
        },
    },
}

config = update_snakemake_config(config, config_default)

cfg = config['bio.ngs.variation.variation']

rule vcftools_vcf2ped:
    """vcftools: convert ped file to vcf."""
    params: cmd=cfg['vcftools']['cmd'],
            options=cfg['vcftools']['options']['main']
    input: "{prefix}.vcf"
    output: "{prefix}.ped"
    shell: "{params.cmd} {params.options} --vcf {input} --plink --out {output}"

rule vcftools_dump_stats:
    """vcftools: dump statistics"""
    params: cmd=os.path.join(cfg['vcftools']['path'], 'vcf-stats'),
            options=cfg['vcftools']['options']['stats']
    input: "{prefix}.vcf"
    output: "{prefix}.stats.dump"
    shell: "{params.cmd} {params.options} {input} -p {wildcards.prefix}.stats"

rule vcftools_vcf_freq:
    """vcftools: calculate the variant frequencies in a vcf file"""
    params: cmd=cfg['vcftools']['cmd'],
            options=cfg['vcftools']['options']['main']
    input: "{prefix}.vcf"
    output: "{prefix}.frq"
    shell: "{params.cmd} --freq {params.options} --vcf  {input} --out {wildcards.prefix}"

rule vcftools_vcf_freq2:
    """vcftools: calculate the variant frequencies in a vcf file using option --freq2"""
    params: cmd=cfg['vcftools']['cmd'],
            options=cfg['vcftools']['options']['main']
    input: "{prefix}.vcf"
    output: "{prefix}.2.frq"
    shell: "{params.cmd} --counts --freq2 {params.options} --vcf {input} --out {wildcards.prefix}.2"

# Vcf
rule vcf_chk:
    """vcf: Run vcf check on vcf file"""
    params: cmd=os.path.join(cfg['vcf']['path'], 'vcf')
    input: "{prefix}.vcf"
    output: "{prefix}.chk"
    shell: "{params.cmd} check {input} > {output}"

# Htslib
rule htslib_plot_vcfcheck:
    """htslib: plot vcf check outut file"""
    params: cmd=os.path.join(cfg['htslib']['path'], 'misc/plot-vcfcheck')
    input: "{prefix}.chk"
    output: "{prefix}-summary.pdf"
    shell: "{params.cmd} {input} -p {wildcards.prefix}"


# snpEff
rule snpeff_download_database:
    """Download snpEff database. FIXME: fix output so that rule doesn't rerun everytime."""
    params: snpeffhome=cfg['snpeff']['path'],
            cmd=cfg['snpeff']['cmd']
    output: cfg['snpeff']['dblist']
    shell: "cd {params.snpeffhome} && {params.cmd} download {output}"

rule snpeff_annotate_variants_vcf:
    """snpEff: annotate variants"""
    params: cmd=cfg['snpeff']['cmd'],
            options=cfg['snpeff']['options'],
            genome_version=cfg['snpeff']['genome_version']
    input: "{prefix}.vcf"
    output: "{prefix}.annotated.vcf"
    shell: "{params.cmd} {params.options} {params.genome_version} {input} -i vcf -o vcf > {output}"

rule snpeff_annotate_variants_txt:
    """snpEff: annotate variants"""
    params: cmd=cfg['snpeff']['cmd'],
            options=cfg['snpeff']['options'],
            genome_version=cfg['snpeff']['genome_version']
    input: "{prefix}.vcf"
    output: "{prefix}.annotated.txt"
    shell: "{params.cmd} {params.options} {params.genome_version} {input} -i vcf -o gatk > {output}"

# Annovar
rule annovar_table_annovar:
    """annovar: run table_annovar. Currently only defined for hg19."""
    params: cmd=os.path.join(cfg['annovar']['path'], 'table_annovar.pl'),
            options=cfg['annovar']['table_options'],
            db=cfg['annovar']['db'],
            buildver=cfg['annovar']['buildver']
    input: "{prefix}.avinput"
    output: "{prefix}.avinput.hg19_multianno.txt"
    shell: "{params.cmd} {input} {params.db} {params.options} --buildver hg19"

rule annovar_convert2annovar:
    """Convert data to annovar format"""
    params: cmd=os.path.join(cfg['annovar']['path'], 'convert2annovar.pl'),
            options=" ".join([cfg['annovar']['options'], cfg['annovar']['convert_options']]),
            vcf_format = cfg['annovar']['convert_vcf_format']
    input: "{prefix}.vcf"
    output: "{prefix}.avinput"
    shell: "{params.cmd} {params.options} -format {params.vcf_format} {input} > {output}"

# rule annovar_download_webfrom_annovar:
#     params: cmd=os.path.join(cfg['annovar']['path'], 'annotate_variation.pl'),
#             buildver=cfg['annovar']['buildver'],
#             db = cfg['annovar']['db']
#     output: "{db}"
#     shell: "{params.cmd} -buildver {params.buildver} -downdb -webfrom annovar {wildcards.db} {params.db}"

# rule annovar_download:
#     params: cmd=os.path.join(cfg['annovar']['path'], 'annotate_variation.pl'),
#             buildver=cfg['annovar']['buildver'],
#             db = cfg['annovar']['db']
#     output: "{db}"
#     shell: "{params.cmd} -buildver {params.buildver} -downdb {wildcards.db} {params.db}"
