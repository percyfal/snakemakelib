# -*- snakemake -*- 
import os
import yaml
import sys
import io
from snakemakelib.config import sml_rules_path, BaseConfig
from snakemake.io import Wildcards, Namedlist

include: './settings.rules'

rule conf_yaml:
    """Print global configuration to yaml output file"""
    output: yaml = os.path.join("{path}", "smlconf_global.yaml")
    run:
        from yaml.representer import Representer
        yaml.add_representer(BaseConfig, Representer.represent_dict)
        with open (output.yaml,"w") as fh:
            fh.write(yaml.dump(config, default_flow_style=False))

rule conf:
    """Print global configuration settings for loaded rules"""
    run:
      s = "Snakemake global configuration variables"
      logger.info("\n" + s)
      logger.info("=" * len(s))
      for (k,v) in sorted(config.items()):
          logger.info (" {k} : {v}".format(k=k, v=v))
      d = config
      d = {config.get("section") : d[config.get("section")]} if config.get("section") in d.keys() else d
      s = "Top-level configuration variables"
      logger.info("\n" + s)
      logger.info("=" * len(s))
      for (k,v) in sorted(d.items()):
          if (not isinstance(v, dict)) and not v is None:
              logger.info (" {key} : {v}".format(key=config['section'], v=v))
      logger.info("")  
      for (k,v) in sorted(d.items(), key=lambda k: (len(k[0].split(".")), k)):
          if (isinstance(v, dict)):
              logger.info (k)
              logger.info ("="*len(k))
              for (kk, vv) in sorted(d[k].items()):
                  logger.info ("    {kk} : {vv}".format(kk=kk, vv=vv))

rule conf_sections:
    """Print configuration sections. TODO: insert docstring from each rule file without running an import statement"""
    run:
      d = config
      s = "Top-level configuration variables"
      logger.info(s)
      logger.info("=" * len(s))
      for (k,v) in sorted(d.items()):
          if (not isinstance(v, dict)):
              logger.info(" " + k)
      s = "Configuration sections"
      logger.info(s)
      logger.info("=" * len(s))
      for (k,v) in sorted(d.items(), key=lambda k: (len(k[0].split(".")), k)):
          if (isinstance(v, dict)):
              logger.info(" " + k)

def _group_rules_by_snakefile(rules):
    d = {}
    for rule in rules:
        k = rule.snakefile
        if k.startswith(sml_rules_path()):
            k = k.replace(sml_rules_path() + os.sep, "").replace(os.sep, ".").replace(".rules", "")
        if not k in d.keys():
            d[k] = []
        d[k].append(rule)
        d[k] = sorted(d[k], key=lambda x: x.name)
    return d

rule rule_ll:
    """Print rules sorted by rule file, including input/output information"""
    run:
      rules = workflow.rules
      d = _group_rules_by_snakefile(rules)
      if not config.get("section") is None:
          d = {config.get("section") : d[config.get("section")]} if config.get("section") in d.keys() else d
      for (snakefile, rl) in d.items():
          logger.info(snakefile)
          logger.info("=" * len(snakefile))
          for rule in rl:
              docstring = "\n    {doc}".format(doc=rule.docstring)
              if rule.input or rule.output:
                  docstring += "\n\tinput: {input}\n\toutput: {output}\n".format(input=rule.input, output=rule.output)
              if rule.shellcmd:
                  format_d = dict()
                  wc = {x:"{{prefix}}".format(x) for x in rule.wildcard_names}
                  format_d.update(dict(input=rule.input, output=rule.output, params=rule.params, threads="{threads}", resources=rule.resources, log=rule.log, version=rule.version, wildcards=Wildcards(Namedlist(fromdict=wc))))
                  shellstring = rule.shellcmd.format(**format_d)
                  docstring += "\tshell: {shell}\n".format(shell=shellstring)
              logger.rule_info(name=rule.name, docstring=docstring)


rule rule_l:
    """Print rules sorted by rule file, excluding input/output information"""
    run:
      rules = workflow.rules
      d = _group_rules_by_snakefile(rules)
      if not config.get("section") is None:
          d = {config.get("section") : d[config.get("section")]} if config.get("section") in d.keys() else d
      for (snakefile, rl) in d.items():
          logger.info(snakefile)
          logger.info("=" * len(snakefile))
          for rule in rl:
              logger.rule_info(name=rule.name, docstring=rule.docstring.split("\n")[0] if isinstance(rule.docstring, str) else None)

rule rulegraph:
    """Print rulegraph"""
    output: rulegraph = "{prefix}_rulegraph.dot"
    run:
        # see http://stackoverflow.com/questions/5136611/capture-stdout-from-a-script-in-python
        backup = sys.stdout
        sys.stdout = io.StringIO()
        workflow.execute(targets=[os.path.basename(wildcards.prefix)], dryrun=True, printrulegraph=True, updated_files=[])
        out = sys.stdout.getvalue()
        sys.stdout.close()
        sys.stdout = backup
        with open (output.rulegraph, "w") as fh:
            fh.write(out)

rule rulegraph_png:
    """Convert rulegraph to png"""
    input: rulegraph = "{prefix}_rulegraph.dot"
    output: png = "{prefix}_rulegraph.png"
    shell: "dot -T png {input.rulegraph} -o {output.png}"

